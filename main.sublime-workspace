{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"render",
				"Rerender"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ts/clientside/Edit.ts",
			"settings":
			{
				"buffer_size": 2381,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n\nEditorController\n .-codeSoarSession : CodeSoarSession\n .-exeClient : ExeClient\n .-editor : AceEditor\n .-onSocketEdit(evt)\n .-onSocketMessage(evt)\n .-OnSocketEditorFocusChange(evt)\n .-onSocketCursorChange(evt)\n .-onSocketSelectionChange(evt)\n .-onSocketActiveLineChange(evt)\n .-OnSocketJoined(evt)\n .-OnSocketLeft(evt)\n .-onSocketScroll(evt)\n -sendEdit()\n -sendMessage()\n -sendScrollChange()\n -sendSelectionChange()\n -sendActiveLineChange()\n -sendEditorFocusLost()\n -sendCursorChange()\n -sendExeRequest()\n -setAutoExe(data)\n .-user : User //The user of this session\n\n*/\n\n/// <reference path=\"./view/Cursor.ts\"/>\n/// <reference path=\"./view/Selection.ts\"/>\n/// <reference path=\"./view/Renderer.ts\"/>\n/// <reference path=\"../common/User.ts\"/>\n/// <reference path=\"../common/IExeClient.ts\"/>\n/// <reference path=\"../common/CodeSoarSession.ts\"/>\n/// <reference path=\"../common/CircularStack.ts\"/>\n/// <reference path=\"../common/messages/EditMessageFactory.ts\"/>\n/// <reference path=\"../common/messages/CursorMessage.ts\"/>\n/// <reference path=\"../common/messages/IMessage.ts\"/>\n/// <reference path=\"../common/Util.ts\"/>\n\nmodule CodeSoar.Client {\n\n\nexport class EditorController {\n\n\n	public Setup (session : CodeSoar.Common.CodeSoarSession,\n				  editor : any) {\n\n		this.Session = session;\n		this.Editor = editor;\n\n\n		//set readonly till we are connected.\n		this.Editor.setReadOnly(true);\n\n		this.EditorSession = editor.getSession();\n		this.EditorDocument = this.EditorSession.getDocument();\n\n\n\n		//reference to this EditorController\n		var self = this;\n\n		//create renderer.\n		this.Renderer = new CodeSoar.Client.View.Renderer(self);\n\n\n		//connect to websocket\n		this.Socket = io.connect(SOCKET_HOST);\n\n		//setup socket events.\n		this.Socket.on('join', function(data) {\n\n			self.Editor.setReadOnly(false);\n\n			//data { uId: #, n: \"name\"}\n			self.UserID = data.uId;\n			self.UserName = data.n;\n\n			console.log(data.u);\n			if (typeof data.u != 'undefined') {\n				console.log('found users to add');\n				for(var i = 0; i < data.u.length; i++) {\n					var usr : CodeSoar.Common.User = new CodeSoar.Common.User();\n\n					usr.uId = data.u[i].uId;\n					usr.Name = data.u[i].Name;\n					if (data.u[i].s)\n						usr.Selection = data.u[i].s;\n					if (data.u[i].c)\n						usr.Cursor = data.u[i].c;\n\n					self.Renderer.AddUser(usr);\n\n				}\n			}\n\n		    //set editor to visible\n		    $(\"#editor\").css(\"visibility\", \"visible\");\n\n		    self.Renderer.Init();\n			self.Renderer.Render();\n\n		});\n		\n\n		this.Socket.on('user-joined', function(data) {\n\n\n			//add user to user list\n			//uId: socket.uId, n: socket.User.Name\n\n			var usr : CodeSoar.Common.User = new CodeSoar.Common.User();\n\n			usr.uId = data.uId;\n			usr.Name = data.n;\n\n			self.Renderer.AddUser(usr);\n\n			//self.Renderer.Render();\n		});\n\n\n		this.Socket.on('user-left', function(data) {\n\n			//remove user from user list\n			//\n			//remove all user-related info, except messages and current edits.\n\n			var usr : CodeSoar.Common.User = new CodeSoar.Common.User();\n\n			usr.uId = data.uId;\n\n			self.Renderer.RemoveUser(usr);\n\n			self.Renderer.Render();\n		});`\n\n\n		this.Socket.on('user-cursor-change', function(data) {\n\n			//update where the given users cursor is located.\n			var usr : CodeSoar.Common.User = self.Renderer.Users.Get(function(a : CodeSoar.Common.User) {\n				if (typeof a == 'undefined' || a == null) {\n					return false;\n				}\n				if (a.uId == data.uId) {\n					return true;\n				}\n				return false;\n			});\n\n			usr.cursorRenderer.Update(data);\n\n			//self.Renderer.Render();\n		});\n		\n\n		//Selection change\n		this.Socket.on('user-selection-change', function(data) {\n			\n			//Update the given users selection\n			//update where the given users cursor is located.\n			var usr : CodeSoar.Common.User = self.Renderer.Users.Get(function(a : CodeSoar.Common.User) {\n				if (typeof a == 'undefined' || a == null) {\n					return false;\n				}\n				if (a.uId == data.uId) {\n					return true;\n				}\n				return false;\n			});\n\n			usr.selectionRenderer.Update(data);\n			//self.Renderer.Render();\n		});\n\n\n\n		this.Socket.on('user-message', function(data) {\n			\n			//fetch actual user's name	\n			var usr : CodeSoar.Common.User = self.Renderer.Users.Get(function(a : CodeSoar.Common.User) {\n				if (typeof a == 'undefined' || a == null) {\n					return false;\n				}\n				if (a.uId == data.uId) {\n					return true;\n				}\n				return false;\n			});\n\n			$(\"#chatMsgs\").append('<li class=\"msg\"><strong>'+usr.Name+': </strong>'+data+'</li>');\n\n		});\n\n\n		//On other user's edit.\n		this.Socket.on('user-edit', function(data) {\n\n			//clone the data object.\n			var dataClone = clone(data);\n\n			//build the edit message from provided data.\n			var msg : CodeSoar.Common.Messages.IMessage = CodeSoar.Common.Messages.EditMessageFactory.BuildEditMessage(dataClone);\n\n			//expand the message so it can be used with the editor\n			msg.Expand();\n\n			//TODO: Sync stuff.\n\n			//apply the change.\n			self.EditorDocument.applyDeltas([msg.ToObject()], true);\n\n\n			self.Renderer.Render();\n\n		});\n\n\n		//Not worrying about this just now...\n		//this.Socket.on('user-language-change', this.OnSocketLanguageChange);\n\n\n		//On edit\n		this.EditorSession.on('change', function(data) {\n\n			//do we ignore this?\n			if (data.data.ignore) {\n				return;\n			}\n			\n			//clone data object\n			var dataClone = clone(data);\n\n			//add timestamp\n			dataClone.ts = Date.now();\n\n			//remove ignore attribute\n			delete dataClone.data.ignore;\n\n			//create message to send off to server.\n			var msg : CodeSoar.Common.Messages.IMessage = CodeSoar.Common.Messages.EditMessageFactory.BuildEditMessage(dataClone.data);\n\n			//srink the message\n			msg.Shrink();\n\n			//send the edit to the other users.\n			self.Socket.emit('edit', msg.ToJSON());\n\n\n			self.Renderer.Render();\n\n		});\n\n		this.EditorSession.on('changeScrollTop', function(val) {\n\n			//val = editorSession.$scrollTop.\n\n			//Renderer selections/cursors/etc.\n\n			self.Renderer.Render();\n\n		});\n\n		this.EditorSession.on('changeScrollLeft', function(val) {\n\n			//val = editorSession.$scrollLeft.\n\n			//Renderer selections/cursors/etc.\n\n			self.Renderer.Render();\n		});\n		\n		this.EditorSession.selection.on('changeCursor', function(data) {\n		\n\n			//clone data object\n			var dataClone = clone(self.Editor.getCursorPosition());\n\n			//build the cursor message from provided data.\n			var msg : CodeSoar.Common.Messages.IMessage = new CodeSoar.Common.Messages.CursorMessage(dataClone);\n\n			//shrink\n			msg.Shrink();\n\n			//send off cursor change message\n			self.Socket.emit('cursor-change', msg);\n		});\n\n		this.EditorSession.selection.on('changeSelection', function(data) {\n\n			var msg : any = {};\n\n			var selection : any = self.EditorSession.selection;\n\n			msg.s = [];\n			if (selection.inMultiSelectMode) {\n				for (var i = 0; i < selection.ranges.length; i++) {\n					msg.s[i] = {\n						//start\n						s : {\n							//column\n							c : selection.ranges[i].start.column,\n							//row\n							r : selection.ranges[i].start.row\n						},\n						//end\n						e :{\n							//column\n							c : selection.ranges[i].end.column,\n							//row\n							r : selection.ranges[i].end.row\n						}\n\n					};\n				}\n			} else {\n\n				msg.s[0] = {\n					//start\n					s : {\n						//column\n						c : selection.anchor.column,\n						//row\n						r : selection.anchor.row\n					},\n					//end\n					e :{\n						//column\n						c : selection.lead.column,\n						//row\n						r : selection.lead.row\n					}\n\n				};\n			}\n\n\n			//send off selection change message\n			self.Socket.emit('selection-change', msg);\n\n\n			self.Renderer.Render();\n\n		});\n\n		//fired when the editor gains focus.\n		this.Editor.on(\"focus\", function() {\n\n			//do nothing for now...\n\n		});\n\n		//fired when the editor looses focus.\n		this.Editor.on(\"blur\", function() {\n\n			//do nothing for now...\n\n		});\n\n\n\n		//setup undo/redo events because apparently these don't count as 'changes' to the document\n		//in this silly version... w/e\n\n		//document.addEventListener(\"EditorRedoEvent\", this.OnRedo, false);\n		//document.addEventListener(\"EditorUndoEvent\", this.OnUndo, false);\n\n		//UI Control\n		$(\"#chatText\").bind('keypress', function (e) {\n		    if ((e.keyCode || e.which) == 13) {\n				if ($(\"#chatText\").val() != '') {\n		        	self.Socket.emit('message', $(\"#chatText\").val());\n					$(\"#chatMsgs\").append('<li class=\"msg\"><strong>'+self.UserName+': </strong>'+$(\"#chatText\").val()+'</li>');\n		      	\n		        	$(\"#chatText\").val('');\n\n				}\n	    	}\n		});\n\n		$(\"#darkBtn\").click(function() {\n			if ($(\"#darkBtn\").hasClass(\"active\")) {\n				return;\n				} else {\n					self.Editor.setTheme(\"ace/theme/twilight\");\n\n					//Set themes for user's\n\n				}\n		});\n\n		$(\"#lightBtn\").click(function() {\n			if ($(\"#lightBtn\").hasClass(\"active\")) {\n				return;\n				} else {\n					self.Editor.setTheme(\"\");\n\n					//Set themes for user's\n\n				}\n		});\n\n\n		var updateContainer = function() {\n			$(\"#chatContainer\").height($(document).height() - $(\"#users\").height() - parseInt($(\"#users\").css(\"margin-top\")) - $(\"#controls\").height() - parseInt($(\"#controls\").css(\"margin-top\")) - $(\".user\").length -$(\"#chatText\").height() - $(\"#chatText\").height() - 4);\n			$(\"#chat\").height($(\"#chatContainer\").height() - $(\"#chatText\").height());\n		};\n\n		$(window).resize(function() {\n		    updateContainer();\n		});\n\n		updateContainer();\n\n\n\n\n		//This starts the session.\n		//\n		//request to join document room, using name provided by user.\n		this.Socket.emit('join', { docID: this.Session.DocID, name: $(\"#nickInput\").val() });\n\n	}\n\n\n\n\n\n	public Renderer : CodeSoar.Client.View.Renderer;\n	public Session : CodeSoar.Common.CodeSoarSession;\n	public ExeClient : CodeSoar.Common.IExeClient;\n	public User : CodeSoar.Common.User;\n	public Editor : any;\n	public EditorSession : any;\n	public EditorDocument : any;\n\n	public UserID : number;\n	public UserName : string;\n\n	private m_syncMode : boolean = false;\n	private m_lastEdit : any = null;\n	public Socket : any;\n}\n}",
			"file": "ts/clientside/EditorController.ts",
			"file_size": 9849,
			"file_write_time": 130183250456025337,
			"settings":
			{
				"buffer_size": 9850,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/common/CodeSoarSession.ts",
			"settings":
			{
				"buffer_size": 1884,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/common/Collection.ts",
			"settings":
			{
				"buffer_size": 1655,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/serverside/codesoar.server.ts",
			"settings":
			{
				"buffer_size": 5454,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/clientside/view/Renderer.ts",
			"settings":
			{
				"buffer_size": 1907,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/serverside/MessageRoom.ts",
			"settings":
			{
				"buffer_size": 4105,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/clientside/view/Cursor.ts",
			"settings":
			{
				"buffer_size": 1403,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/clientside/view/Selection.ts",
			"settings":
			{
				"buffer_size": 2020,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/serverside/Config.ts",
			"settings":
			{
				"buffer_size": 1969,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/clientside/view/IView.ts",
			"settings":
			{
				"buffer_size": 169,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/common/Util.ts",
			"settings":
			{
				"buffer_size": 763,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/common/User.ts",
			"settings":
			{
				"buffer_size": 743,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "bash: no job control in this shell\nmartin@martin-linux /opt/sublime_text $ d\nd: command not found\nmartin@martin-linux /opt/sublime_text $ cd ..\nmartin@martin-linux /opt $ cd ~\nmartin@martin-linux ~ $ cd codesoar/codesoar\nmartin@martin-linux ~/codesoar/codesoar $ ",
			"settings":
			{
				"buffer_size": 263,
				"line_ending": "Unix",
				"name": "*REPL* [bash -i]",
				"scratch": true
			}
		},
		{
			"contents": "> ",
			"settings":
			{
				"buffer_size": 2,
				"line_ending": "Unix",
				"name": "*REPL* [js]",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"About"
			],
			[
				"noe",
				"SublimeREPL: Node"
			],
			[
				"repl",
				"SublimeREPL: Shell"
			],
			[
				"node",
				"SublimeREPL: Node"
			],
			[
				"shell",
				"SublimeREPL: Shell"
			],
			[
				"repl no",
				"SublimeREPL: Node"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"repl sh",
				"SublimeREPL: Shell"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package control: ins",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 121.0,
		"history":
		[
			"chown",
			"help"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/martin/codesoar/codesoar/ts/common/Collection.ts",
		"/home/martin/codesoar/codesoar/ts/clientside/view/ViewCollection.ts",
		"/home/martin/codesoar/codesoar/ts/serverside/MessageRoom.ts",
		"/home/martin/codesoar/codesoar/app.js",
		"/home/martin/.config/sublime-text-3/Packages/SideBarEnhancements/Default (Linux).sublime-keymap",
		"/home/martin/.config/sublime-text-3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/home/martin/.config/sublime-text-3/Packages/User/SublimeREPL.sublime-settings",
		"/home/martin/.config/sublime-text-3/Packages/SideBarEnhancements/CHANGELOG",
		"/home/martin/.config/sublime-text-3/Packages/SideBarEnhancements/Default.sublime-keymap",
		"/home/martin/.config/sublime-text-3/Packages/SideBarEnhancements/SideBar.py",
		"/home/martin/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/martin/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/martin/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/martin/codesoar/codesoar/ts/clientside/Edit.ts",
		"/home/martin/codesoar/codesoar/views/editor.jade",
		"/home/martin/codesoar/codesoar/notes.txt",
		"/home/martin/codesoar/codesoar/ts/common/CodeSoarSession.ts",
		"/home/martin/codesoar/codesoar/se./public/javascripts/codesoar.client.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"cursorCha",
			"GetUsers",
			"m_users",
			"GetUsers",
			"GetUsers\n\n",
			"Rerender",
			"view",
			"m_views",
			"shrink"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Users",
			"Renderer",
			"obj",
			"m_objs"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ts/clientside/Edit.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2381,
						"regions":
						{
						},
						"selection":
						[
							[
								183,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ts/clientside/EditorController.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9850,
						"regions":
						{
						},
						"selection":
						[
							[
								3051,
								3051
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1840.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ts/common/CodeSoarSession.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1884,
						"regions":
						{
						},
						"selection":
						[
							[
								275,
								275
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ts/common/Collection.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1655,
						"regions":
						{
						},
						"selection":
						[
							[
								1369,
								1369
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 990.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ts/serverside/codesoar.server.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5454,
						"regions":
						{
						},
						"selection":
						[
							[
								882,
								882
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ts/clientside/view/Renderer.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1907,
						"regions":
						{
						},
						"selection":
						[
							[
								1591,
								1591
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 441.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "ts/serverside/MessageRoom.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4105,
						"regions":
						{
						},
						"selection":
						[
							[
								3502,
								3502
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 35.0,
						"translation.y": 1854.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "ts/clientside/view/Cursor.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1403,
						"regions":
						{
						},
						"selection":
						[
							[
								460,
								460
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "ts/clientside/view/Selection.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2020,
						"regions":
						{
						},
						"selection":
						[
							[
								1235,
								1235
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 819.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "ts/serverside/Config.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1969,
						"regions":
						{
						},
						"selection":
						[
							[
								754,
								754
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "ts/clientside/view/IView.ts",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 169,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "ts/common/Util.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 763,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "ts/common/User.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 743,
						"regions":
						{
						},
						"selection":
						[
							[
								631,
								631
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 263,
						"regions":
						{
						},
						"selection":
						[
							[
								263,
								263
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_complete_commit_on_tab": true,
							"auto_indent": false,
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": null,
							"repl_id": "96980b1601bf4b1c92e1223e0b4127c4",
							"repl_restart_args":
							{
								"cmd":
								{
									"linux":
									[
										"bash",
										"-i"
									],
									"osx":
									[
										"bash",
										"-i"
									],
									"windows":
									[
										"cmd.exe"
									]
								},
								"cmd_postfix": "\n",
								"cwd": "$file_path",
								"encoding":
								{
									"linux": "utf-8",
									"osx": "utf-8",
									"windows": "$win_cmd_encoding"
								},
								"env":
								{
								},
								"suppress_echo": true,
								"syntax": "Packages/Text/Plain text.tmLanguage",
								"type": "subprocess"
							},
							"repl_sublime2": false,
							"smart_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2,
						"regions":
						{
						},
						"selection":
						[
							[
								2,
								2
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_complete_commit_on_tab": true,
							"auto_indent": false,
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": "js",
							"repl_id": "a226c01b054a4722a5b0534b9733121e",
							"repl_restart_args":
							{
								"autocomplete_server": true,
								"cmd":
								{
									"linux":
									[
										"node",
										"${packages}/SublimeREPL/config/NodeJS/repl.js"
									],
									"osx":
									[
										"node",
										"${packages}/SublimeREPL/config/NodeJS/repl.js"
									],
									"windows":
									[
										"node.exe",
										"${packages}/SublimeREPL/config/NodeJS/repl.js"
									]
								},
								"cwd": "$file_path",
								"encoding": "utf8",
								"extend_env":
								{
									"NODE_NO_READLINE": 1
								},
								"external_id": "js",
								"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
								"type": "subprocess"
							},
							"repl_sublime2": false,
							"smart_indent": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.778106499569,
			1.0
		]
	},
	"menu_visible": true,
	"project": "codesoar.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"notes.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		]
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 252.0,
	"status_bar_visible": false,
	"template_settings":
	{
		"max_columns": 1
	}
}
